// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FunctionalsTests.Features.Complaint
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class POSTComplaintFeature : object, Xunit.IClassFixture<POSTComplaintFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreateComplaint.feature"
#line hidden
        
        public POSTComplaintFeature(POSTComplaintFeature.FixtureData fixtureData, FunctionalsTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt"), "Features/Complaint", "POST complaint", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Criar uma nova denuncia")]
        [Xunit.TraitAttribute("FeatureTitle", "POST complaint")]
        [Xunit.TraitAttribute("Description", "Criar uma nova denuncia")]
        public void CriarUmaNovaDenuncia()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Criar uma nova denuncia", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    testRunner.Given("que eu queira criar uma nova denuncia", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 6
    testRunner.When("eu chamar o endpoint de criação de denuncia passando a category \"0\", description " +
                        "\"Criacao de denuncia para testar o fluxo\" e parceiro com email \"\" e nome \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 7
    testRunner.Then("eu devo receber o status \"OK\" e a mensagem de retorno \"Denuncia criada com sucess" +
                        "o\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Criar uma nova denuncia com um parceiro informado")]
        [Xunit.TraitAttribute("FeatureTitle", "POST complaint")]
        [Xunit.TraitAttribute("Description", "Criar uma nova denuncia com um parceiro informado")]
        public void CriarUmaNovaDenunciaComUmParceiroInformado()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Criar uma nova denuncia com um parceiro informado", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
    testRunner.Given("que eu queira criar uma nova denuncia", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 11
    testRunner.When("eu chamar o endpoint de criação de denuncia passando a category \"0\", description " +
                        "\"Criacao de denuncia para testar o fluxo\" e parceiro com email \"exemplo@gmail.co" +
                        "m\" e nome \"Teste\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 12
    testRunner.Then("eu devo receber o status \"OK\" e a mensagem de retorno \"Denuncia criada com sucess" +
                        "o\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Criar uma nova denuncia informando um parceiro com email invalido")]
        [Xunit.TraitAttribute("FeatureTitle", "POST complaint")]
        [Xunit.TraitAttribute("Description", "Criar uma nova denuncia informando um parceiro com email invalido")]
        [Xunit.TraitAttribute("Category", "regressivo")]
        public void CriarUmaNovaDenunciaInformandoUmParceiroComEmailInvalido()
        {
            string[] tagsOfScenario = new string[] {
                    "regressivo"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Criar uma nova denuncia informando um parceiro com email invalido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
    testRunner.Given("que eu queira criar uma nova denuncia", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 17
    testRunner.When("eu chamar o endpoint de criação de denuncia passando a category \"0\", description " +
                        "\"Criacao de denuncia para testar o fluxo\" e parceiro com email \"CRIACAODENUNCIAg" +
                        "mail.com\" e nome \"Teste\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 18
    testRunner.Then("eu devo receber o status \"BadRequest\" e a mensagem de retorno \"Email invalido\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Criar uma nova denuncia informando com um parceiro inexistente")]
        [Xunit.TraitAttribute("FeatureTitle", "POST complaint")]
        [Xunit.TraitAttribute("Description", "Criar uma nova denuncia informando com um parceiro inexistente")]
        [Xunit.TraitAttribute("Category", "regressivo")]
        public void CriarUmaNovaDenunciaInformandoComUmParceiroInexistente()
        {
            string[] tagsOfScenario = new string[] {
                    "regressivo"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Criar uma nova denuncia informando com um parceiro inexistente", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
    testRunner.Given("que eu queira criar uma nova denuncia", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 23
    testRunner.When("eu chamar o endpoint de criação de denuncia passando a category \"0\", description " +
                        "\"Criacao de denuncia para testar o fluxo\" e parceiro com email \"CRIACAODENUNCIA@" +
                        "gmail.com\" e nome \"Teste\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 24
    testRunner.Then("eu devo receber o status \"BadRequest\" e a mensagem de retorno \"Parceiro inválido " +
                        "para esta denúncia\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                POSTComplaintFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                POSTComplaintFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
